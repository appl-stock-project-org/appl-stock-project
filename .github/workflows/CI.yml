# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: CI

on:
  pull_request:
    branches: ["develop", "main"]
  push:
    branches: ["develop", "main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore
      - name: Test with the dotnet CLI
        run: dotnet test
      - name: Start minikube
        uses: medyagh/setup-minikube@latest
      - name: Try the cluster
        run: kubectl get pods -A
      - name: Build image
        run: |
          export SHELL=/bin/bash
          eval $(minikube -p minikube docker-env)
          docker build -f ./Dockerfile -t apple-stock-kubernetes-test .
          docker images
      - name: Deploy to minikube
        run: |
          kubectl apply -f service-kubernetes-manifest.yaml
          kubectl apply -f deployment-kubernetes-manifest.yaml
          kubectl get pods
          export POD_NAME="$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')"
          echo "Name of the Pod: $POD_NAME"
          export POD_STATUS="$(kubectl get pod "$POD_NAME" -o jsonpath='{.status.phase}')"
          echo "Pod status: $POD_STATUS"
          iteration=1
          while ["$(kubectl get pod "$POD_NAME" -o jsonpath='{.status.phase}')" != "Running" ] && $iteration -lt 5]; do
            echo "Waiting for Pod $POD_NAME to be in the Running state...";
            echo "Iteration $iteration";
            sleep 5; 
            iteration=$((iteration + 1));
          done

      - name: Test service URLs
        run: |
          minikube service list
          minikube service apple-stock-service --url
          curl $(minikube service apple-stock-service --url)
